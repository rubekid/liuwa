package ${packageName}.controller;

import java.util.List;

import com.liuwa.common.utils.bean.BeanUtils;
import com.liuwa.common.utils.poi.ExportResult;
import com.liuwa.common.utils.poi.ImportResult;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import com.liuwa.common.annotation.Log;
import com.liuwa.common.core.controller.BaseController;
import com.liuwa.common.core.domain.Result;
import com.liuwa.common.enums.BusinessType;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.${ClassName}Service;
import com.liuwa.common.utils.poi.ExcelUtil;
#if($table.crud || $table.sub)
import com.liuwa.common.core.page.PageData;
#elseif($table.tree)
#end
#if($supportImport)
import org.springframework.web.multipart.MultipartFile;
#end

/**
 * ${functionName}Controller
 * 
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@Api(value = "${functionName}")
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController{

    @Autowired
    private ${ClassName}Service ${className}Service;

    /**
     * 查询${functionName}列表
     */
    @ApiOperation("查询${functionName}列表")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:list')")
    @GetMapping("/list")
#if($table.crud || $table.sub)
    public PageData list(${ClassName} ${className})
    {
        startPage();
        List<${ClassName}> list = ${className}Service.findList(${className});
        return getPageData(list);
    }
#elseif($table.tree)
    public Result.ItemsVo list(${ClassName} ${className})
    {
        List<${ClassName}> list = ${className}Service.findList(${className});
        return Result.items(list);
    }
#end

#if($supportImport)
    @ApiOperation("导入${functionName}")
    @Log(title = "导入${functionName}", businessType = BusinessType.IMPORT)
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:import')")
    @PostMapping("/import")
    public ImportResult importData(MultipartFile file, boolean overwrite) throws Exception
    {
        ExcelUtil<${ClassName}> util = new ExcelUtil<${ClassName}>(${ClassName}.class);
        List<${ClassName}> list = util.importExcel(file.getInputStream());
        return ${className}Service.importData(list, overwrite);

    }


    /**
     * 导入模板
     * @return
     */
    @ApiOperation("导入${functionName}模板")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:import')")
    @GetMapping("/import/template")
    public ExportResult importTemplate()
    {
        ExcelUtil<${ClassName}> util = new ExcelUtil<${ClassName}>(${ClassName}.class);
        return util.importTemplateExcel("${functionName}数据模板");
    }
#end

#if($supportExport)
    /**
     * 导出${functionName}列表
     */
    @ApiOperation("导出${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:export')")
    @Log(title = "导出${functionName}", businessType = BusinessType.EXPORT)
    @GetMapping("/export")
    public ExportResult export(${ClassName} ${className})
    {
        List<${ClassName}> list = ${className}Service.findList(${className});
        ExcelUtil<${ClassName}> util = new ExcelUtil<${ClassName}>(${ClassName}.class);
        return util.exportExcel(list, "${functionName}数据");
    }
#end

    /**
     * 获取${functionName}详细信息
     */
    @ApiOperation("获取${functionName}详细信息")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
    @GetMapping(value = "/{${pkColumn.javaField}}")
    public ${ClassName} get(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField})
    {
        return ${className}Service.get(${pkColumn.javaField});
    }

    /**
     * 新增${functionName}
     */
    @ApiOperation("新增${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')")
    @Log(title = "新增${functionName}", businessType = BusinessType.INSERT)
    @PostMapping
    public void add(@RequestBody ${ClassName} ${className})
    {
        ${className}Service.insert(${className});
    }

    /**
     * 修改${functionName}
     */
    @ApiOperation("修改${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
    @Log(title = "修改${functionName}", businessType = BusinessType.UPDATE)
    @PutMapping
    public void edit(@RequestBody ${ClassName} ${className})
    {
#if($pkColumn.javaField.length() > 2 && $pkColumn.javaField.substring(1,2).matches("[A-Z]"))
#set($AttrName=$pkColumn.javaField)
#else
#set($AttrName=$pkColumn.javaField.substring(0,1).toUpperCase() + ${pkColumn.javaField.substring(1)})
#end
        ${ClassName} old${ClassName} = ${className}Service.get(${className}.get${AttrName}());
        BeanUtils.copyBeanNotNull2Bean(${className}, old${ClassName});
        ${className}Service.update(old${ClassName});
    }

#foreach($column in $columns)
#if($column.htmlType == 'switch')
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
    /**
     * 变更${column.columnComment}
     */
    @ApiOperation("${functionName}变更${column.columnComment}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
    @Log(title = "${functionName}变更${column.columnComment}", businessType = BusinessType.UPDATE)
    @PutMapping("/change${AttrName}")
    public void change${AttrName}(@RequestBody ${ClassName} ${className}){
        ${className}Service.update${AttrName}(${className});
    }

    /**
     * 批量变更${column.columnComment}
     */
    @ApiOperation("${functionName}批量变更${column.columnComment}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
    @Log(title = "${functionName}批量变更${column.columnComment}", businessType = BusinessType.UPDATE)
    @PutMapping("/batchChange${AttrName}")
    public void batchChange${AttrName}(@RequestParam ${pkColumn.javaType}[] ${pkColumn.javaField}s, @RequestParam ${column.javaType} ${column.javaField}){
        ${className}Service.batchUpdate${AttrName}(${pkColumn.javaField}s, ${column.javaField});
    }

#end
#end


    /**
     * 删除${functionName}
     */
    @ApiOperation("删除${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:remove')")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
	@DeleteMapping("/{${pkColumn.javaField}s}")
    public void remove(@PathVariable ${pkColumn.javaType}[] ${pkColumn.javaField}s)
    {
        ${className}Service.batchDelete(${pkColumn.javaField}s);
    }
}
