<template>

    <el-dialog :title="title"
               :close-on-click-modal="false"
               :close-on-press-escape="false"
               :visible.sync="open" custom-class="form-dialog" append-to-body>
      <el-form ref="form" :model="form" :rules="rules" label-width="120px">
#foreach($column in $columns)
#set($field=$column.javaField)
#if($column.insert && !$column.pk)
#if(($column.usableColumn) || (!$column.superColumn))
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
#set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
#set($comment=$column.columnComment)
#end
#set($dictType=$column.dictType)
#if("" != $treeParentCode && $column.javaField == $treeParentCode)
        <el-form-item label="${comment}" prop="${treeParentCode}">
          <treeselect v-model="form.${treeParentCode}" :options="${businessName}Options" :normalizer="normalizer" placeholder="请选择${comment}" />
        </el-form-item>
#elseif($column.htmlType == "input")
        <el-form-item label="${comment}" prop="${field}">
          <el-input v-model="form.${field}" placeholder="请输入${comment}" />
        </el-form-item>
#elseif($column.htmlType == "money")
        <el-form-item label="${comment}" prop="${field}">
          <number type="money" v-model="form.${field}" placeholder="请输入${comment}" />
        </el-form-item>
#elseif($column.htmlType == "integer")
        <el-form-item label="${comment}" prop="${field}">
          <number type="integer" v-model="form.${field}" placeholder="请输入${comment}" />
        </el-form-item>
#elseif($column.htmlType == "decimal")
        <el-form-item label="${comment}" prop="${field}">
          <number type="decimal" v-model="form.${field}" placeholder="请输入${comment}" />
        </el-form-item>
#elseif($column.htmlType == "percent")
        <el-form-item label="${comment}" prop="${field}">
          <number type="percent" v-model="form.${field}" placeholder="请输入${comment}" />
        </el-form-item>
#elseif($column.htmlType == "ratio")
        <el-form-item label="${comment}" prop="${field}">
          <number type="ratio" v-model="form.${field}" placeholder="请输入${comment}" />
        </el-form-item>
#elseif($column.htmlType == "rate")
        <el-form-item label="${comment}" prop="${field}">
            <el-rate v-model="form.${field}"></el-rate>
        </el-form-item>
#elseif($column.htmlType == "color")
         <el-form-item label="${comment}" prop="${field}">
             <el-color-picker v-model="form.${field}"></el-color-picker>
         </el-form-item>
#elseif($column.htmlType == "switch")
          <el-form-item label="${comment}" prop="${field}">
              <el-switch
                      v-model="form.${field}">
              </el-switch>
          </el-form-item>

#elseif($column.htmlType == "singleImage")
        <el-form-item label="${comment}" prop="${field}">
          <single-image-upload v-model="form.${field}"/>
        </el-form-item>
#elseif($column.htmlType == "multiImage")
        <el-form-item label="${comment}" prop="${field}">
          <multi-image-upload v-model="form.${field}"/>
        </el-form-item>
#elseif($column.htmlType == "fileUpload")
        <el-form-item label="${comment}">
          <fileUpload v-model="form.${field}"/>
        </el-form-item>
#elseif($column.htmlType == "editor")
        <el-form-item label="${comment}">
          <editor v-model="form.${field}" :min-height="192"/>
        </el-form-item>
#elseif($column.htmlType == "select" && "" != $dictType)
        <el-form-item label="${comment}" prop="${field}">
          <el-select v-model="form.${field}" placeholder="请选择${comment}">
            <el-option
              v-for="dict in ${field}Options"
              :key="dict.dictValue"
              :label="dict.dictLabel"
              #if($column.javaType == "Integer" || $column.javaType == "Long"):value="parseInt(dict.dictValue)"#else:value="dict.dictValue"#end

            ></el-option>
          </el-select>
        </el-form-item>
#elseif($column.htmlType == "select" && $dictType)
        <el-form-item label="${comment}" prop="${field}">
          <el-select v-model="form.${field}" placeholder="请选择${comment}">
            <el-option label="请选择字典生成" value="" />
          </el-select>
        </el-form-item>
#elseif($column.htmlType == "checkbox" && "" != $dictType)
        <el-form-item label="${comment}">
          <el-checkbox-group v-model="form.${field}">
            <el-checkbox
              v-for="dict in ${field}Options"
              :key="dict.dictValue"
              :label="dict.dictValue">
              {{dict.dictLabel}}
            </el-checkbox>
          </el-checkbox-group>
        </el-form-item>
#elseif($column.htmlType == "checkbox" && $dictType)
        <el-form-item label="${comment}">
          <el-checkbox-group v-model="form.${field}">
            <el-checkbox>请选择字典生成</el-checkbox>
          </el-checkbox-group>
        </el-form-item>
#elseif($column.htmlType == "radio" && "" != $dictType)
        <el-form-item label="${comment}">
          <el-radio-group v-model="form.${field}">
            <el-radio
              v-for="dict in ${field}Options"
              :key="dict.dictValue"
              #if($column.javaType == "Integer" || $column.javaType == "Long"):label="parseInt(dict.dictValue)"#else:label="dict.dictValue"#end

            >{{dict.dictLabel}}</el-radio>
          </el-radio-group>
        </el-form-item>
#elseif($column.htmlType == "radio" && $dictType)
        <el-form-item label="${comment}">
          <el-radio-group v-model="form.${field}">
            <el-radio label="1">请选择字典生成</el-radio>
          </el-radio-group>
        </el-form-item>
#elseif($column.htmlType == "datetime")
        <el-form-item label="${comment}" prop="${field}">
          <el-date-picker clearable size="small"
            v-model="form.${field}"
            type="date"
            value-format="yyyy-MM-dd"
            placeholder="选择${comment}">
          </el-date-picker>
        </el-form-item>
#elseif($column.htmlType == "textarea")
        <el-form-item label="${comment}" prop="${field}">
          <el-input v-model="form.${field}" type="textarea" placeholder="请输入内容" />
        </el-form-item>
#end
#end
#end
#end
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button type="primary" @click="submitForm">确 定</el-button>
        <el-button @click="cancel">取 消</el-button>
      </div>
    </el-dialog>

</template>

<script>
import { list${BusinessName}, get${BusinessName}, add${BusinessName}, update${BusinessName} } from "@/api/${moduleName}/${businessName}";
import { Loading } from 'element-ui';
import Treeselect from "@riophae/vue-treeselect";
import "@riophae/vue-treeselect/dist/vue-treeselect.css";

export default {
  name: "${BusinessName}Form",
  props:{
    item:{
        type: Object
    }
  },
  components: {
    Treeselect
  },
  data() {
    return {
      // 表单初始化完成
      formInited: false,
      // 页面/弹窗标题
      title: '',
#foreach ($column in $columns)
#if($column.insert && !$column.pk)
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
#set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
#set($comment=$column.columnComment)
#end
#if(${column.dictType} != '')
      // $comment字典
      ${column.javaField}Options: [],
#end
#end
#end
      // 是否显示弹出层
      open: false,
      // ${functionName}树选项
      ${businessName}Options: [],
      // 表单参数
      form: {},
      // 表单校验
      rules: {
#foreach ($column in $columns)
#if($column.required)
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
#set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
#set($comment=$column.columnComment)
#end
        $column.javaField: [
          { required: true, message: "$comment不能为空", trigger: #if($column.htmlType == "select")"change"#else"blur"#end }
        ]#if($velocityCount != $columns.size()),#end

#end
#end
      }
    };
  },
  created() {
    this.open = true;

    // 数据字典处理
    let dictReadyHandlers = {};
    let appendDictHandler = (key, handler) => {
      let handlers = dictReadyHandlers[key] || [];
      handlers.push(handler);
      dictReadyHandlers[key] = handlers;
    }

#foreach ($column in $columns)
#if(${column.dictType} != '')
    appendDictHandler("${column.dictType}", response => {
      this.${column.javaField}Options = response.data;
    });
#end
#end

    for(let key in dictReadyHandlers){
       this.getDicts(key).then(res => {
          let callbacks = dictReadyHandlers[key] || [];
          callbacks.forEach( callback => {
            callback(JSON.parse(JSON.stringify(res)));
          })
       });
    }
  },
  mounted(){
    // 获取 from并加入loading，避免网络差造成假死现象
    this.$nextTick(() => {
      if(this.$refs.form){
        if(!this.dataInited){
          this.loadingInstance = Loading.service({
            target: this.$refs.form.$el,
            fullscreen: false
          });
        }
      }
    })
    this.title = this.item.${pkColumn.javaField} ? "修改${functionName}" : "添加${functionName}";
    this.getTreeselect().then(res => {
      if(this.item.${pkColumn.javaField}){
        this.handleUpdate(this.item.${pkColumn.javaField});
      }
      else{
        this.handleAdd(this.item.${treeParentCode});
        this.formInited = true;
      }
    }).catch(err => {
      this.formInited = true;
    })

  },
  computed:{
    dataInited(){
      return this.formInited;
    }
  },
  watch:{
      open(newVal){
        if(!newVal){
          this.$emit('update:item', null);
        }
      },
      dataInited(val){
        if(val && this.loadingInstance){
          this.loadingInstance.close();
        }
      }
  },
  methods: {

    // 取消按钮
    cancel() {
      this.open = false;
      this.reset();
    },
    // 表单重置
    reset() {
      this.form = {
#foreach ($column in $columns)
#if($column.htmlType == "radio")
        $column.javaField: #if($column.javaType == "Integer" || $column.javaType == "Long")1#else"1"#end#if($velocityCount != $columns.size()),#end

#elseif($column.htmlType == "checkbox")
        $column.javaField: []#if($velocityCount != $columns.size()),#end

#else
        $column.javaField: null#if($velocityCount != $columns.size()),#end

#end
#end
      };
      this.resetForm("form");
    },
    /** 新增按钮操作 */
    handleAdd(treeParentCode) {
      this.reset();
      this.form.${treeParentCode} = treeParentCode;
    },
    /** 修改按钮操作 */
    handleUpdate(${pkColumn.javaField}) {
      this.reset();
      get${BusinessName}(${pkColumn.javaField}).then(response => {
        this.form = response.data;
#foreach ($column in $columns)
#if($column.htmlType == "checkbox")
        this.form.$column.javaField = this.form.${column.javaField}.split(",");
#end
#end

      }).finally(()=>{
        this.formInited = true;
      });
    },
    /** 转换${functionName}数据结构 */
    normalizer(node) {
      if (node.children && !node.children.length) {
        delete node.children;
      }
      return {
        id: node.${treeCode},
        label: node.${treeName},
        children: node.children
      };
    },
    /** 查询${functionName}下拉树结构 */
    getTreeselect() {
        return new Promise((resolve, reject) => {
          list${BusinessName}().then(response => {
            this.${businessName}Options = [];
            const data = { ${treeCode}: 0, ${treeName}: '顶级节点', children: [] };
            data.children = this.handleTree(response.data, "${treeCode}", "${treeParentCode}", null, this.item.${pkColumn.javaField});
            this.${businessName}Options.push(data);
            resolve();
          }).catch(err=>{
             reject(err);
          });
        });

    },
    /** 提交按钮 */
    submitForm() {
      this.#[[$]]#refs["form"].validate(valid => {
        if (valid) {
#foreach ($column in $columns)
#if($column.htmlType == "checkbox")
          this.form.$column.javaField = this.form.${column.javaField}.join(",");
#end
#end

          let loadingInstance = Loading.service({
            target: this.$refs.form.$el,
            fullscreen: false,
            text: '提交中'
          });
          if (this.form.${pkColumn.javaField} != null) {
            update${BusinessName}(this.form).then(response => {
              this.msgSuccess("修改成功");
              this.open = false;
              this.$emit('success', this.from);
            }).catch(err => {
              console.log(err);
            }).finally(()=>{
              loadingInstance.close();
            });
          } else {
            add${BusinessName}(this.form).then(response => {
              this.msgSuccess("新增成功");
              this.open = false;
              this.$emit('success', this.from);
            }).catch(err => {
               console.log(err);
            }).finally(()=>{
               loadingInstance.close();
            });
          }
        }
      });
    }
  }
};
</script>
